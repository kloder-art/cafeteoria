{"version":3,"sources":["webpack:///./src/components/index/small/Item.jsx","webpack:///./src/components/index/small/List.jsx","webpack:///./src/pages/index.js","webpack:///./src/components/SEO.jsx","webpack:///./src/components/index/Item.jsx","webpack:///./src/components/index/List.jsx"],"names":["StyledItem","styled","div","Item","item","fixed","frontmatter","image","childImageSharp","thumb","alt","title","to","slug","className","date","categories","map","x","idx","key","length","StyledList","List","items","StyledIndex","pageQuery","IndexPage","data","allMarkdownRemark","edges","Layout","slice","node","home","SEO","description","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","fluid","excerpt"],"mappings":"0aAMMA,EAAaC,IAAOC,IAAV,uEAAGD,CAAH,8PAwDDE,EAhCF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACX,kBAACJ,EAAD,KACE,kBAAC,IAAD,CACEK,MAAOD,EAAKE,YAAYC,MAAMC,gBAAgBC,MAC9CC,IAAKN,EAAKE,YAAYK,QAExB,6BACE,4BACE,kBAAC,OAAD,CAAMC,GAAE,aAAeR,EAAKE,YAAYO,MACrCT,EAAKE,YAAYK,QAGtB,yBAAKG,UAAW,QACbV,EAAKE,YAAYS,KACjB,OACD,yBAAKD,UAAW,cACbV,EAAKE,YAAYU,WAAWC,KAAI,SAACC,EAAGC,GAAJ,OAC/B,0BAAMC,IAAKD,GACT,kBAAC,OAAD,CAAMP,GAAE,aAAeM,GAAMA,GAC5BC,EAAMf,EAAKE,YAAYU,WAAWK,OAAS,GAAK,cC3CzDC,EAAarB,IAAOC,IAAV,uEAAGD,CAAH,mGAoBDsB,EAZF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,kBAACF,EAAD,KACGE,EAAMP,KAAI,SAACC,EAAGC,GAAJ,OACT,kBAAC,EAAD,CAAMf,KAAMc,EAAGE,IAAKD,SCPpBM,EAAcxB,IAAOC,IAAV,qEAAGD,CAAH,8CA2BJyB,GAFEC,UAlBG,SAAC,GAAD,IAEcC,EAFd,EAChBA,KACEC,kBAAqBC,MAFP,OAKhB,kBAACC,EAAA,EAAD,CAAQP,MAAOI,EAAKI,MAAM,EAAG,GAAGf,KAAI,SAACC,GAAD,OAAOA,EAAEe,QAAOC,MAAI,GACtD,kBAACC,EAAA,EAAD,CAAKxB,MAAM,UACX,kBAACc,EAAD,KACE,kBAAC,IAAD,CAAMD,MAAOI,EAAKI,MAAM,EAAG,GAAGf,KAAI,SAACC,GAAD,OAAOA,EAAEe,UAC3C,kBAAC,EAAD,CAAWT,MAAOI,EAAKI,MAAM,GAAGf,KAAI,SAACC,GAAD,OAAOA,EAAEe,aAW7B,e,mFChCtB,SAASE,EAAT,GAAwD,IAAzCC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,KAAM3B,EAAe,EAAfA,MAAOuB,EAAQ,EAARA,KACrCK,EAD6C,OAC7CA,KAcFC,EAAkBJ,GAAeG,EAAKE,aAAaL,YAEzD,OACE,kBAAC,SAAD,CACEM,eAAgB,CACdL,QAEF1B,MAAOA,EACPgC,cACET,EAAOK,EAAKE,aAAa9B,MAArB,QAAqC4B,EAAKE,aAAa9B,MAE7D2B,KAAM,CACJ,CACEM,KAAM,cACNC,QAASL,GAEX,CACEM,SAAU,WACVD,QAASlC,GAEX,CACEmC,SAAU,iBACVD,QAASL,GAEX,CACEM,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASN,EAAKE,aAAaM,QAE7B,CACEH,KAAM,gBACNC,QAASlC,GAEX,CACEiC,KAAM,sBACNC,QAASL,IAEXQ,OAAOV,KAKfH,EAAIc,aAAe,CACjBZ,KAAM,KACNC,KAAM,GACNF,YAAa,GACbF,MAAM,GAWOC,O,wGC9ETnC,EAAaC,IAAOC,IAAV,mEAAGD,CAAH,qzBA2GDE,EArCF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACX,kBAACJ,EAAD,KACE,yBAAKc,UAAW,UACd,kBAAC,OAAD,CAAMF,GAAE,aAAeR,EAAKE,YAAYO,MACtC,kBAAC,IAAD,CACEqC,MAAO9C,EAAKE,YAAYC,MAAMC,gBAAgB0C,MAC9CxC,IAAKN,EAAKE,YAAYK,QAExB,yBAAKG,UAAW,QAAhB,oBAEF,yBAAKA,UAAW,cACbV,EAAKE,YAAYU,WAAWC,KAAI,SAACC,EAAGC,GAAJ,OAC/B,0BAAMC,IAAKD,GACT,kBAAC,OAAD,CAAMP,GAAE,aAAeM,GAAMA,GAC5BC,EAAMf,EAAKE,YAAYU,WAAWK,OAAS,GAAK,WAKzD,yBAAKP,UAAW,QACd,4BACE,kBAAC,OAAD,CAAMF,GAAE,aAAeR,EAAKE,YAAYO,MACrCT,EAAKE,YAAYK,QAGtB,8BAAOP,EAAKE,YAAYS,OAE1B,yBAAKD,UAAW,WACd,2BAAIV,EAAK+C,YClGT7B,EAAarB,IAAOC,IAAV,uEAAGD,CAAH,mCAiBDsB,IAZF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,kBAACF,EAAD,KACGE,EAAMP,KAAI,SAACC,EAAGC,GAAJ,OACT,kBAAC,EAAD,CAAMf,KAAMc,EAAGE,IAAKD","file":"component---src-pages-index-js-e58dd95e301f0e722aa7.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Link } from 'gatsby';\nimport GatsbyImage from 'gatsby-image';\n\nconst StyledItem = styled.div`\n  display: grid;\n  grid-template-columns: 110px auto;\n  grid-auto-rows: auto;\n  grid-gap: 1rem;\n  h4 {\n    margin: 0;\n    line-height: 1.4rem;\n  }\n  .meta {\n    font-size: 0.8rem;\n    color: var(--text-light-color);\n    .categories {\n      display: inline;\n      a {\n        color: var(--text-light-color);\n        &:hover {\n          color: black;\n        }\n      }\n    }\n  }\n`;\n\nconst Item = ({ item }) => (\n  <StyledItem>\n    <GatsbyImage\n      fixed={item.frontmatter.image.childImageSharp.thumb}\n      alt={item.frontmatter.title}\n    />\n    <div>\n      <h4>\n        <Link to={`/articles/${item.frontmatter.slug}`}>\n          {item.frontmatter.title}\n        </Link>\n      </h4>\n      <div className={'meta'}>\n        {item.frontmatter.date}\n        {' en '}\n        <div className={'categories'}>\n          {item.frontmatter.categories.map((x, idx) => (\n            <span key={idx}>\n              <Link to={`/category/${x}`}>{x}</Link>\n              {idx < item.frontmatter.categories.length - 1 && ', '}\n            </span>\n          ))}\n        </div>\n      </div>\n    </div>\n  </StyledItem>\n);\n\nItem.propTypes = {\n  item: PropTypes.object,\n};\n\nexport default Item;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Item from './Item';\n\nconst StyledList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-auto-rows: auto;\n  grid-gap: 1rem;\n  margin-top: 2rem;\n`;\n\nconst List = ({ items }) => (\n  <StyledList>\n    {items.map((x, idx) => (\n      <Item item={x} key={idx} />\n    ))}\n  </StyledList>\n);\n\nList.propTypes = {\n  items: PropTypes.array,\n};\n\nexport default List;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport List from '../components/index/List';\nimport SmallList from '../components/index/small/List';\nimport styled from 'styled-components';\n\nconst StyledIndex = styled.div`\n  hr.sep {\n    margin: 2rem 0;\n    border-color: #eee;\n  }\n`;\n\nconst IndexPage = ({\n  data: {\n    allMarkdownRemark: { edges: data },\n  },\n}) => (\n  <Layout items={data.slice(0, 6).map((x) => x.node)} home>\n    <SEO title=\"Barra\" />\n    <StyledIndex>\n      <List items={data.slice(6, 9).map((x) => x.node)} />\n      <SmallList items={data.slice(9).map((x) => x.node)} />\n    </StyledIndex>\n  </Layout>\n);\n\nIndexPage.propTypes = {\n  data: PropTypes.object,\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fileInfo: { sourceInstanceName: { eq: \"articles\" } } }\n    ) {\n      edges {\n        node {\n          excerpt\n          frontmatter {\n            slug\n            title\n            date(formatString: \"D [de] MMMM [de] YYYY\", locale: \"es-ES\")\n            categories\n            image {\n              childImageSharp {\n                fluid {\n                  ...GatsbyImageSharpFluid_withWebp\n                }\n                thumb: fixed(width: 110, height: 70, quality: 85) {\n                  ...GatsbyImageSharpFixed_withWebp\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet-async';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, title, home }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={\n        home ? site.siteMetadata.title : `%s | ${site.siteMetadata.title}`\n      }\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: 'website',\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary',\n        },\n        {\n          name: 'twitter:creator',\n          content: site.siteMetadata.author,\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: 'es',\n  meta: [],\n  description: '',\n  home: false,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  home: PropTypes.bool,\n};\n\nexport default SEO;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Img from 'gatsby-image';\nimport { Link } from 'gatsby';\n\nconst StyledItem = styled.div`\n  display: grid;\n  grid-gap: 1rem;\n  grid-template-columns: 1fr 2fr;\n  grid-template-rows: auto;\n  grid-template-areas:\n    'header header'\n    'meta content';\n  .header {\n    position: relative;\n    grid-area: header;\n    height: 140px;\n    overflow: hidden;\n    a {\n      border-bottom: 0px;\n    }\n    img {\n      max-height: 140px;\n    }\n    .categories {\n      position: absolute;\n      top: 0;\n      right: 0;\n      color: rgba(255, 255, 255, 0.75);\n      font-size: 0.8333333333333333em;\n      background: rgba(0, 0, 0, 0.25);\n      padding: 0.1em 0.8em;\n      text-transform: capitalize;\n      a {\n        color: lightgrey;\n        &:hover {\n          color: white;\n        }\n      }\n    }\n    .link {\n      display: none;\n      position: absolute;\n      bottom: 0;\n      right: 0;\n      color: white;\n      font-size: 0.8333333333333333em;\n      background: var(--primary-color);\n      padding: 0.1em 0.8em;\n      text-transform: capitalize;\n    }\n  }\n  .meta {\n    grid-area: meta;\n    color: var(--text-light-color);\n    h4 {\n      margin: 0 0 0.5rem;\n      line-height: 1.5rem;\n    }\n  }\n  .content {\n    grid-area: content;\n    p {\n      margin: 0;\n    }\n  }\n  &:hover {\n    .header {\n      .link {\n        display: block;\n      }\n    }\n  }\n`;\n\nconst Item = ({ item }) => (\n  <StyledItem>\n    <div className={'header'}>\n      <Link to={`/articles/${item.frontmatter.slug}`}>\n        <Img\n          fluid={item.frontmatter.image.childImageSharp.fluid}\n          alt={item.frontmatter.title}\n        />\n        <div className={'link'}>Leer artículo →</div>\n      </Link>\n      <div className={'categories'}>\n        {item.frontmatter.categories.map((x, idx) => (\n          <span key={idx}>\n            <Link to={`/category/${x}`}>{x}</Link>\n            {idx < item.frontmatter.categories.length - 1 && ', '}\n          </span>\n        ))}\n      </div>\n    </div>\n    <div className={'meta'}>\n      <h4>\n        <Link to={`/articles/${item.frontmatter.slug}`}>\n          {item.frontmatter.title}\n        </Link>\n      </h4>\n      <span>{item.frontmatter.date}</span>\n    </div>\n    <div className={'content'}>\n      <p>{item.excerpt}</p>\n    </div>\n  </StyledItem>\n);\n\nItem.propTypes = {\n  item: PropTypes.object,\n};\n\nexport default Item;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Item from './Item';\n\nconst StyledList = styled.div`\n  display: grid;\n  grid-gap: 1.5rem;\n`;\n\nconst List = ({ items }) => (\n  <StyledList>\n    {items.map((x, idx) => (\n      <Item item={x} key={idx} />\n    ))}\n  </StyledList>\n);\n\nList.propTypes = {\n  items: PropTypes.array,\n};\n\nexport default List;\n"],"sourceRoot":""}